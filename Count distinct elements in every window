// C++ CODE

    vector<int> countDistinct(vector<int> &arr, int k) {
        // code here.
        int n=arr.size(),j=0;
        vector<int> ans;
        unordered_map<int,int> frequency;
        for(int i=0;i<n;i++){
            frequency[arr[i]]++;
            if(i>=k-1){
                ans.push_back(frequency.size());
                frequency[arr[j]]--;
                if(frequency[arr[j]]==0)frequency.erase(arr[j]);
                j++;
            }
        }
        return ans;
    }


// JAVA CODE

    ArrayList<Integer> countDistinct(int arr[], int k) {
        // code here
        int n=arr.length,j=0;
        ArrayList<Integer> ans = new ArrayList<>();
        HashMap<Integer,Integer> frequency = new HashMap<>();
        for(int i=0;i<n;i++){
            frequency.put(arr[i],frequency.getOrDefault(arr[i],0)+1);
            if(i>=k-1){
                ans.add(frequency.size());
                frequency.put(arr[j],frequency.get(arr[j])-1);
                if(frequency.get(arr[j])==0)frequency.remove(arr[j]);
                j++;
            }
        }
        return ans;
    }


// Time Complexity:- O(N)
// Space Complexity:- O(N)
