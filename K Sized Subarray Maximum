// C++ CODE

    vector<int> max_of_subarrays(int k, vector<int> &arr) {
        // your code here
        vector<int> ans;
        deque<int> dq;
        for(int i=0;i<arr.size();i++){
            if(dq.size() and dq.front()==i-k)dq.pop_front();
            while(dq.size() and arr[dq.back()]<=arr[i])dq.pop_back();
            dq.push_back(i);
            if(i>=k-1)ans.push_back(arr[dq.front()]);
        }
        return ans;
    }


// JAVA CODE

    public ArrayList<Integer> max_of_subarrays(int k, int arr[]) {
        // Your code here
        ArrayList<Integer> ans = new ArrayList<>();
        Deque<Integer> dq = new ArrayDeque<>();
        for(int i=0;i<arr.length;i++){
            if(dq.size()!=0 && dq.getFirst()==i-k)dq.removeFirst();
            while(dq.size()!=0 && arr[dq.getLast()]<=arr[i])dq.removeLast();
            dq.add(i);
            if(i>=k-1)ans.add(arr[dq.getFirst()]);
        }
        return ans;
    }


// Time Complexity:- O(N)
// Space Complexity:- O(K)
