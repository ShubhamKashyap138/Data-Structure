// C++ CODE

    vector<int> findMajority(vector<int>& nums) {
        // Your code goes here.
        int n=nums.size(), can1, can2, counter1 = 0, counter2 = 0;
        for(int i=0;i<n;i++){
            if(nums[i]==can1)counter1++;
            else if(nums[i]==can2)counter2++;
            else if(counter1==0){
                can1=nums[i];
                counter1++;
            }
            else if(counter2==0){
                can2=nums[i];
                counter2++;
            }
            else{
                counter1--;
                counter2--;
            }
        }
        int vote1=0,vote2=0;
        for(auto x:nums){
            if(x==can1)vote1++;
            if(x==can2)vote2++;
        }
        vector<int> ans;
        if(vote1>n/3)ans.push_back(can1);
        if(vote2>n/3)ans.push_back(can2);
        if(ans.size()==2 && ans[0]>ans[1])swap(ans[0],ans[1]);
        return ans;
    }


// JAVA CODE

    public List<Integer> findMajority(int[] nums) {
        // Your code goes here.
        int n=nums.length, can1=Integer.MIN_VALUE, can2=Integer.MIN_VALUE, counter1 = 0, counter2 = 0;
        for(int i=0;i<n;i++){
            if(nums[i]==can1)counter1++;
            else if(nums[i]==can2)counter2++;
            else if(counter1==0){
                can1=nums[i];
                counter1=1;
            }
            else if(counter2==0){
                can2=nums[i];
                counter2=1;
            }
            else{
                counter1--;
                counter2--;
            }
        }
        int vote1=0,vote2=0;
        for(int x:nums){
            if(x==can1)vote1++;
            if(x==can2)vote2++;
        }
        List<Integer> ans = new ArrayList<>();
        if(vote1>n/3)ans.add(can1);
        if(vote2>n/3)ans.add(can2);
        if(ans.size()==2 && ans.get(0)>ans.get(1)){
            int temp = ans.get(0);
            ans.set(0,ans.get(1));
            ans.set(1,temp);
        }
        return ans;
    }


// Time Complexity:- O(N)
// Space Complexity:- O(1)
